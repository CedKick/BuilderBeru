// routes/builds.js - üéÆ PARTAGE DE BUILDS par Kaisel & Claude
const express = require('express');
const router = express.Router();
const fs = require('fs').promises;
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const recentSaves = new Map();



// üìÅ Configuration des fichiers
const BUILDS_FILE = path.join(__dirname, '..', 'data', 'builds.json');

// üõ†Ô∏è Assurer que le fichier builds existe
const ensureBuildsFile = async () => {
  try {
    await fs.access(BUILDS_FILE);
  } catch {
    // Cr√©er le dossier data si n√©cessaire
    const dataDir = path.dirname(BUILDS_FILE);
    try {
      await fs.access(dataDir);
    } catch {
      await fs.mkdir(dataDir, { recursive: true });
    }
    // Cr√©er le fichier builds.json vide
    await fs.writeFile(BUILDS_FILE, '[]', 'utf8');
    console.log('üìÅ Fichier builds.json cr√©√©');
  }
};

// üìù SAUVEGARDER UN BUILD
router.post('/save', async (req, res) => {
  try {
    // Rate limiting par IP
    const clientIp = req.ip || req.connection.remoteAddress;
    const now = Date.now();
    
    // Nettoyer les vieilles entr√©es (plus de 5 minutes)
    const fiveMinutesAgo = now - (5 * 60 * 1000);
    for (const [ip, timestamps] of recentSaves.entries()) {
      const filtered = timestamps.filter(t => t > fiveMinutesAgo);
      if (filtered.length === 0) {
        recentSaves.delete(ip);
      } else {
        recentSaves.set(ip, filtered);
      }
    }
    
    // V√©rifier le rate limit (max 5 sauvegardes par 5 minutes)
    const userSaves = recentSaves.get(clientIp) || [];
    if (userSaves.length >= 5) {
      return res.status(429).json({
        error: 'Trop de requ√™tes',
        kaisel: 'Limite atteinte: 5 partages par 5 minutes',
        retryAfter: 300 // secondes
      });
    }
    
    console.log('üéÆ Sauvegarde d\'un build...');
    
    const { buildData } = req.body;
    
    if (!buildData) {
      return res.status(400).json({
        error: 'Donn√©es du build manquantes',
        kaisel: 'BuildData requis'
      });
    }
    
    // V√©rifier la taille des donn√©es (max 1MB)
    const dataSize = JSON.stringify(buildData).length;
    if (dataSize > 1048576) { // 1MB en bytes
      return res.status(413).json({
        error: 'Donn√©es trop volumineuses',
        kaisel: 'Maximum 1MB par build'
      });
    }
    
    // G√©n√©rer l'ID et sauvegarder
    const buildId = uuidv4().substring(0, 8);
    
    const newBuild = {
      id: buildId,
      data: buildData,
      createdAt: new Date().toISOString(),
      views: 0,
      version: '1.0',
      ip: clientIp // Pour tracking anti-spam
    };
    
    await ensureBuildsFile();
    const buildsData = await fs.readFile(BUILDS_FILE, 'utf8');
    const builds = JSON.parse(buildsData);
    
    builds.push(newBuild);
    
    await fs.writeFile(BUILDS_FILE, JSON.stringify(builds, null, 2), 'utf8');
    
    // Ajouter √† l'historique des sauvegardes
    userSaves.push(now);
    recentSaves.set(clientIp, userSaves);
    
    console.log(`‚úÖ Build ${buildId} sauvegard√© (IP: ${clientIp}, ${userSaves.length}/5)`);
    
    const shareUrl = `https://builderberu.com/build#${buildId}`;
    
    res.json({
      success: true,
      id: buildId,
      url: shareUrl,
      kaisel: 'üéÆ Build sauvegard√© avec succ√®s!',
      shortUrl: buildId
    });
    
  } catch (error) {
    console.error('‚ùå Erreur sauvegarde build:', error);
    res.status(500).json({
      error: 'Erreur lors de la sauvegarde',
      message: error.message,
      kaisel: '√âchec sauvegarde build'
    });
  }
});

// üîç R√âCUP√âRER UN BUILD
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üîç R√©cup√©ration du build ${id}`);
    
    // Lire les builds
    await ensureBuildsFile();
    const buildsData = await fs.readFile(BUILDS_FILE, 'utf8');
    const builds = JSON.parse(buildsData);
    
    // Trouver le build
    const build = builds.find(b => b.id === id);
    
    if (!build) {
      return res.status(404).json({
        error: 'Build non trouv√©',
        kaisel: `Build ${id} introuvable`
      });
    }
    
    // Incr√©menter les vues
    build.views = (build.views || 0) + 1;
    
    // Sauvegarder avec les vues mises √† jour
    await fs.writeFile(BUILDS_FILE, JSON.stringify(builds, null, 2), 'utf8');
    
    console.log(`‚úÖ Build ${id} r√©cup√©r√© (${build.views} vues)`);
    
    res.json({
      success: true,
      build: {
        id: build.id,
        data: build.data,
        createdAt: build.createdAt,
        views: build.views,
        version: build.version
      },
      kaisel: `üéÆ Build charg√©! (${build.views} vues)`
    });
    
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration build:', error);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration',
      message: error.message,
      kaisel: '√âchec chargement build'
    });
  }
});

// üìä STATISTIQUES D'UN BUILD (optionnel)
router.get('/:id/stats', async (req, res) => {
  try {
    const { id } = req.params;
    
    await ensureBuildsFile();
    const buildsData = await fs.readFile(BUILDS_FILE, 'utf8');
    const builds = JSON.parse(buildsData);
    
    const build = builds.find(b => b.id === id);
    
    if (!build) {
      return res.status(404).json({
        error: 'Build non trouv√©'
      });
    }
    
    res.json({
      success: true,
      stats: {
        id: build.id,
        createdAt: build.createdAt,
        views: build.views || 0,
        age: Math.floor((Date.now() - new Date(build.createdAt).getTime()) / (1000 * 60 * 60 * 24)) + ' jours'
      },
      kaisel: 'üìä Stats du build'
    });
    
  } catch (error) {
    console.error('‚ùå Erreur stats build:', error);
    res.status(500).json({
      error: 'Erreur stats',
      message: error.message
    });
  }
});

// üßπ NETTOYAGE DES VIEUX BUILDS (optionnel - √† appeler via cron)
router.post('/cleanup', async (req, res) => {
  try {
    const { daysToKeep = 30, adminToken } = req.body;
    
    // V√©rifier le token admin (utilise ton syst√®me JWT existant)
    if (!adminToken || adminToken !== process.env.ADMIN_CLEANUP_TOKEN) {
      return res.status(403).json({
        error: 'Non autoris√©',
        kaisel: 'Token admin requis'
      });
    }
    
    await ensureBuildsFile();
    const buildsData = await fs.readFile(BUILDS_FILE, 'utf8');
    const builds = JSON.parse(buildsData);
    
    const cutoffDate = Date.now() - (daysToKeep * 24 * 60 * 60 * 1000);
    const initialCount = builds.length;
    
    // Filtrer les builds r√©cents
    const recentBuilds = builds.filter(build => {
      const buildDate = new Date(build.createdAt).getTime();
      return buildDate > cutoffDate;
    });
    
    const deletedCount = initialCount - recentBuilds.length;
    
    // Sauvegarder
    await fs.writeFile(BUILDS_FILE, JSON.stringify(recentBuilds, null, 2), 'utf8');
    
    console.log(`üßπ Cleanup: ${deletedCount} builds supprim√©s`);
    
    res.json({
      success: true,
      stats: {
        initialCount,
        deletedCount,
        remainingCount: recentBuilds.length,
        daysToKeep
      },
      kaisel: `üßπ ${deletedCount} vieux builds nettoy√©s`
    });
    
  } catch (error) {
    console.error('‚ùå Erreur cleanup builds:', error);
    res.status(500).json({
      error: 'Erreur cleanup',
      message: error.message
    });
  }
});

module.exports = router;