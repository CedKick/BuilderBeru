// components/IgrisTutorial/tutorialSteps.js

// üé≤ Syst√®me de variations de dialogues
const DIALOGUE_VARIATIONS = {
    welcome: [
        {
            message: "Salutations, Monarque ! Je suis Igris, ton ombre fid√®le. Laisse-moi te guider dans la cr√©ation de ton Hunter parfait... üó°Ô∏è",
            speaker: 'igris'
        },
        {
            message: "Mon Seigneur ! Igris √† votre service. Pr√™t √† forger le build ultime ? Les ombres attendent vos ordres ! ‚öîÔ∏è",
            speaker: 'igris'
        },
        {
            message: "Monarque... Le temps est venu. Transformons ce Hunter ordinaire en l√©gende vivante ! üíÄ",
            speaker: 'igris'
        }
    ],
    
    // üé≠ VARIATIONS IGRISK (Tank d√©guis√©)
    welcome_igrisk: [
        {
            message: "Salutations, Monarque ! Je suis... *tousse* IGRIS ! Oui, c'est moi, Igris ! Totalement pas Tank d√©guis√© ! üó°Ô∏èüòÖ",
            speaker: 'igrisk'
        },
        {
            message: "Mon Seigneur ! C'est moi Igr-- *voix qui d√©rape* IGRIS ! Je vais te montrer les builds... avec beaucoup de D√âFENSE ! Euh, je veux dire √©quilibr√©s ! ‚öîÔ∏èüõ°Ô∏è",
            speaker: 'igrisk'
        },
        {
            message: "Monarque... *ajuste son d√©guisement* Je suis votre ombre fid√®le Igris ! Pas du tout Tank avec une perruque ! Commen√ßons ! üíÄ",
            speaker: 'igrisk'
        }
    ],
    
    cerbere_intro: [
        {
            message: "WOUF WOUF ! üê∫ *Cerb√®re s'agite d'excitation*",
            speaker: 'cerbere'
        },
        {
            message: "OUAF OUAF OUAF ! *Cerb√®re bondit partout* NOUVEAUUU HUNTERRRR ! üéâ",
            speaker: 'cerbere'
        },
        {
            message: "*Cerb√®re renifle l'air* WOUF ! √áa sent le build l√©gendaire ici ! üî•",
            speaker: 'cerbere'
        }
    ],
    
    // üêï CERB√àRE R√âAGIT √Ä IGRISK
    cerbere_suspicious: [
        {
            message: "*renifle* WOUF ? Tu sens bizarre Igris... Tu sens comme... TANK ?! ü§î",
            speaker: 'cerbere'
        },
        {
            message: "GRRR... Igris, pourquoi tu parles de d√©fense tout le temps ? C'est louche ! WOUF ! üëÄ",
            speaker: 'cerbere'
        },
        {
            message: "*Cerb√®re plisse les yeux* Attends... C'EST PAS IGRIS ! C'EST TANK ! WOUF WOUF ! üò±",
            speaker: 'cerbere'
        }
    ],
    
    igris_calms: [
        {
            message: "Du calme Cerb√®re... Nous avons une mission importante. Commen√ßons !",
            speaker: 'igris'
        },
        {
            message: "Cerb√®re, contr√¥le ton enthousiasme. Le Monarque a besoin de concentration...",
            speaker: 'igris'
        },
        {
            message: "*soupir* Toujours aussi √©nergique... Bon, focus Cerb√®re ! On a du travail.",
            speaker: 'igris'
        }
    ],
    
    // üé≠ IGRISK ESSAIE DE CALMER CERB√àRE
    igrisk_calms: [
        {
            message: "Du calme Cerb-- je veux dire, bon chien ! *tousse* Pardon, Cerb√®re. Concentrons-nous sur la D√âFENSE-- euh, le tutoriel !",
            speaker: 'igrisk'
        },
        {
            message: "*voix forc√©e* Cerb√®re, sois sage ! Igris-- MOI, Igris, te demande de te calmer ! Les tanks-- LES OMBRES comptent sur nous !",
            speaker: 'igrisk'
        },
        {
            message: "*sueur* Cerb√®re arr√™te de me renifler ! Je suis Igris ! Pas Tank ! Pourquoi je sentirais la pomme pourrie ?!",
            speaker: 'igrisk'
        }
    ]
};

// üêâ TANK INTERVENTIONS SP√âCIALES
const TANK_INTERRUPTIONS = [
    {
        afterStep: 'cerbere_intro',
        chance: 0.3,
        sequence: [
            {
                message: "Tiens tiens... Qui fait autant de bruit par ici ? üôÑ",
                speaker: 'tank',
                duration: 3500
            },
            {
                message: "GRRRRR ! WOUF WOUF ! C'est MON territoire ici ! üò§",
                speaker: 'cerbere',
                duration: 3000
            },
            {
                message: "Ton territoire ? *ricane* J'√©tais l√† bien avant toi, le chiot ! üòè",
                speaker: 'tank',
                duration: 3500
            },
            {
                message: "*Igris s√©pare les deux* ASSEZ ! On a un tutoriel √† terminer !",
                speaker: 'igris',
                duration: 3500
            }
        ]
    },
    // üé≠ INTERRUPTION SP√âCIALE SI IGRISK
    {
        afterStep: 'cerbere_suspicious_igrisk',
        chance: 0.8, // Plus de chance si c'est Igrisk !
        sequence: [
            {
                message: "Mais... mais... C'est MA voix √ßa ! IGRIS ?! QU'EST-CE QUE TU FAIS AVEC MA VOIX ?! üò±",
                speaker: 'tank',
                duration: 4000
            },
            {
                message: "*panique* NON NON ! Je suis Igris ! Regarde, j'ai une √©p√©e ! *sort un bouclier* MERDE !",
                speaker: 'igrisk',
                duration: 3500
            },
            {
                message: "WOUF WOUF WOUF ! JE LE SAVAIS ! C'EST TANK D√âGUIS√â ! *rigole* ü§£",
                speaker: 'cerbere',
                duration: 3000
            },
            {
                message: "IMPOSTEUR ! Tu oses usurper l'identit√© d'Igris ?! Rends-moi mon d√©guisement ! üò§",
                speaker: 'tank',
                duration: 3500
            },
            {
                message: "*abandonne* Ok ok... C'est moi... Mais Igris √©tait aux toilettes alors... üòÖ",
                speaker: 'igrisk',
                duration: 3500
            }
        ]
    }
];

// üìä Stats disponibles
const HELMET_MAIN_STATS = [
    'Attack %', 'Defense %', 'HP %', 
    'Additional Attack', 'Additional Defense', 'Additional HP'
];

const ALL_SUBSTATS = [
    'Critical Hit Damage', 'Critical Hit Rate', 
    'Attack %', 'Additional Attack',
    'Defense Penetration', 'Damage Increase',
    'Defense %', 'Additional Defense',
    'HP %', 'Additional HP',
    'MP Consumption Reduction', 'Additional MP',
    'MP Recovery Rate Increase (%)', 'Damage Reduction'
];

const DPS_SUBSTATS = [
    'Critical Hit Damage', 'Critical Hit Rate',
    'Attack %', 'Defense Penetration'
];

const TANK_SUBSTATS = [
    'Defense %', 'Additional Defense', 
    'HP %', 'Damage Reduction'
];

// üé≠ STATS PR√âF√âR√âES PAR IGRISK (Tank d√©guis√©)
const IGRISK_PREFERRED_STATS = [
    'Defense %', 'Additional Defense'
];

// üé≠ Noms d'artifacts amusants
const FUNNY_ARTIFACT_NAMES = [
    "Build de la Mort qui Tue",
    "Pomme Pourrie Def",
    "Cerb√®re's Best Friend",
    "Tank va rager MDR",
    "Proc ou pas Proc",
    "RNG Jesus Help Me",
    "F2P btw", 
    "Whale Destroyer 3000",
    "Igris Approved‚Ñ¢",
    "Press F for Respect",
    "404 Skill Not Found",
    "Git Gud Scrub",
    "No Crit No Life",
    "All Attack Go BRRRR",
    "Budget Build 2025",
    "Meta Slave Ultimate"
];

// üé≠ Noms sp√©ciaux si IGRISK
const IGRISK_ARTIFACT_NAMES = [
    "Definitely Not Tank's Build",
    "Pomme d'or ULTRA DEF",
    "Full Defense Go BRRRR",
    "Tank Supr√©macie",
    "Igris? Never Heard of Him",
    "Bouclier > √âp√©e",
    "Defense is the Best Offense",
    "Pas du tout suspect",
    "100% Legit Igris Build"
];

// üé≤ Fonctions utilitaires
const getRandomVariation = (stepId) => {
    const variations = DIALOGUE_VARIATIONS[stepId];
    if (!variations || variations.length === 0) return null;
    return variations[Math.floor(Math.random() * variations.length)];
};

const shouldTankInterrupt = (stepId) => {
    const interruption = TANK_INTERRUPTIONS.find(int => int.afterStep === stepId);
    if (!interruption) return null;
    const roll = Math.random();
    return roll < interruption.chance ? interruption : null;
};

const getRandomStat = (type = 'main', excludeList = [], isIgrisk = false) => {
    // Si c'est Igrisk, favoriser les stats de d√©fense !
    if (isIgrisk && Math.random() < 0.7) {
        const defensePool = IGRISK_PREFERRED_STATS.filter(stat => !excludeList.includes(stat));
        if (defensePool.length > 0) {
            return defensePool[Math.floor(Math.random() * defensePool.length)];
        }
    }
    
    let statPool = type === 'main' ? HELMET_MAIN_STATS : ALL_SUBSTATS;
    statPool = statPool.filter(stat => !excludeList.includes(stat));
    
    if (type === 'sub' && Math.random() < 0.6 && !isIgrisk) {
        const dpsPool = DPS_SUBSTATS.filter(stat => !excludeList.includes(stat));
        if (dpsPool.length > 0) {
            return dpsPool[Math.floor(Math.random() * dpsPool.length)];
        }
    }
    
    if (statPool.length === 0) {
        const emergencyPool = ALL_SUBSTATS.filter(stat => !excludeList.includes(stat));
        if (emergencyPool.length > 0) {
            return emergencyPool[Math.floor(Math.random() * emergencyPool.length)];
        }
    }
    
    return statPool[Math.floor(Math.random() * statPool.length)];
};

const isGoodStatForCharacter = (stat) => {
    const universalGoodStats = ['Critical Hit Damage', 'Critical Hit Rate', 'Attack %', 'Defense Penetration', 'Damage Increase'];
    const defenseStats = ['Defense %', 'Additional Defense'];
    const badStats = [ 'Additional MP', 'MP Recovery Rate Increase (%)', 'Damage Reduction'];
    
    if (universalGoodStats.includes(stat)) return 'good';
    if (defenseStats.includes(stat)) return 'defense';
    if (badStats.includes(stat)) return 'bad';
    return 'neutral';
};

// üé¨ Animation CSS pour l'effet d√©mo
const addShakeAnimation = () => {
    if (!document.getElementById('demo-shake-style')) {
        const style = document.createElement('style');
        style.id = 'demo-shake-style';
        style.textContent = `
            @keyframes shake {
                0%, 100% { transform: translateX(0); }
                10%, 30%, 50%, 70%, 90% { transform: translateX(-10px); }
                20%, 40%, 60%, 80% { transform: translateX(10px); }
            }
        `;
        document.head.appendChild(style);
    }
};

// üèóÔ∏è Constructeur dynamique des √©tapes
export const buildDynamicTutorialSteps = () => {
    const steps = [];
    
    // üé≠ D√âTERMINER SI C'EST IGRISK OU IGRIS (5% de chance)
    const IS_IGRISK = Math.random() < 0.05;
    const GUIDE_NAME = IS_IGRISK ? 'igrisk' : 'igris';
    
    console.log(IS_IGRISK ? 'üé≠ IGRISK DETECTED! Tank s\'est d√©guis√© !' : '‚öîÔ∏è Igris guide normal');
    
    // Ajouter l'animation shake pour l'effet d√©mo
    addShakeAnimation();
    
    // Variables pour stocker les choix
    let selectedMainStat = '';
    let selectedSubstats = [];
    let selectedArtifactName = '';
    
    // 1. Welcome
    const welcomeVariation = IS_IGRISK 
        ? getRandomVariation('welcome_igrisk')
        : getRandomVariation('welcome');
    steps.push({
        id: 'welcome',
        ...welcomeVariation,
        duration: 6500,
        autoNext: true,
    });
    
    // Pause
    steps.push({
        id: 'pause_1',
        message: "",
        duration: 200,
        autoNext: true,
        skipBubble: true
    });
    
    // 2. Cerbere intro
    const cerbereIntroVariation = getRandomVariation('cerbere_intro');
    steps.push({
        id: 'cerbere_intro',
        ...cerbereIntroVariation,
        duration: 3000,
        autoNext: true
    });
    
    // üé≠ SI IGRISK, CERB√àRE DEVIENT SUSPICIEUX
    if (IS_IGRISK && Math.random() < 0.7) {
        const suspiciousVariation = getRandomVariation('cerbere_suspicious');
        steps.push({
            id: 'cerbere_suspicious_igrisk',
            ...suspiciousVariation,
            duration: 3500,
            autoNext: true
        });
        
        // Tank peut r√©agir s'il est d√©couvert
        const tankInterruption = shouldTankInterrupt('cerbere_suspicious_igrisk');
        if (tankInterruption) {
            tankInterruption.sequence.forEach((step, index) => {
                steps.push({
                    id: `tank_discovered_${index}`,
                    ...step,
                    autoNext: true
                });
            });
            
            // Apr√®s la d√©couverte, on continue quand m√™me le tuto
            steps.push({
                id: 'igrisk_continues_anyway',
                message: "*tousse* Bon bon... Peu importe qui je suis, on a un tutoriel √† finir ! Focus sur la D√âFEN-- sur le BUILD !",
                speaker: 'igrisk',
                duration: 4000,
                autoNext: true
            });
        }
    } else if (!IS_IGRISK) {
        // Tank interruption normale si c'est le vrai Igris
        const tankInterruption1 = shouldTankInterrupt('cerbere_intro');
        if (tankInterruption1) {
            tankInterruption1.sequence.forEach((step, index) => {
                steps.push({
                    id: `tank_interruption_1_${index}`,
                    ...step,
                    autoNext: true
                });
            });
        }
    }
    
    // 3. Igris/Igrisk calms
    const calmVariation = IS_IGRISK 
        ? getRandomVariation('igrisk_calms')
        : getRandomVariation('igris_calms');
    steps.push({
        id: 'guide_calms',
        ...calmVariation,
        duration: 4000,
        autoNext: true
    });
    
    // Character selector avec highlight
    steps.push({
        id: 'character_selector_zone',
        message: IS_IGRISK 
            ? "D'abord, regarde ici. Le s√©lecteur de... *regarde ses notes* personnage ! Oui c'est √ßa !"
            : "D'abord, regarde ici en haut. C'est le s√©lecteur de personnage.",
        speaker: GUIDE_NAME,
        selector: () => {
            const selects = document.querySelectorAll('select');
            for (const select of selects) {
                const hasCharacterOptions = Array.from(select.options).some(opt =>
                    opt.text.includes('Sung Jinwoo') ||
                    opt.text.includes('Cha Hae-in') ||
                    opt.text.includes('Choi Jong-in') ||
                    opt.text === 'S√©lectionner un personnage'
                );
                if (hasCharacterOptions) return select;
            }
            return selects[0];
        },
        highlight: true,
        duration: 4500,
        autoNext: true
    });
    
    // Select random hunter
    steps.push({
        id: 'select_random_hunter',
        message: IS_IGRISK
            ? "Changeons pour un Hunter avec beaucoup de D√âFENSE-- euh, je veux dire, un Hunter √©quilibr√© !"
            : "Changeons pour un autre Hunter... Voyons voir qui sera l'√©lu !",
        speaker: GUIDE_NAME,
        duration: 3500,
        autoNext: true,
        action: () => {
            setTimeout(() => {
                const selects = document.querySelectorAll('select');
                let characterSelect = null;

                for (const select of selects) {
                    const options = Array.from(select.options);
                    const hasMultipleCharacters = options.filter(opt =>
                        opt.text.includes('Sung Jinwoo') ||
                        opt.text.includes('Cha Hae-in') ||
                        opt.text.includes('Choi Jong-in') ||
                        opt.text.includes('Baek Yoonho') ||
                        opt.text.includes('Min Byung-gyu')
                    ).length >= 2;

                    if (hasMultipleCharacters) {
                        characterSelect = select;
                        console.log('‚úÖ Select des personnages trouv√©');
                        break;
                    }
                }

                if (characterSelect) {
                    const currentValue = characterSelect.value;
                    console.log('üîç Hunter actuel:', currentValue);

                    const validOptions = Array.from(characterSelect.options).filter(opt =>
                        opt.value !== '' && 
                        opt.value !== currentValue &&
                        !opt.text.includes('Select') &&
                        !opt.text.includes('S√©lectionner')
                    );

                    if (validOptions.length > 0) {
                        // Si Igrisk, pr√©f√©rer Baek Yoonho (tank) !
                        let selectedOption;
                        if (IS_IGRISK) {
                            const tankOption = validOptions.find(opt => opt.text.includes('Baek Yoonho'));
                            selectedOption = tankOption || validOptions[Math.floor(Math.random() * validOptions.length)];
                        } else {
                            const randomIndex = Math.floor(Math.random() * validOptions.length);
                            selectedOption = validOptions[randomIndex];
                        }
                        
                        console.log('üéØ Nouveau Hunter s√©lectionn√©:', selectedOption.text);
                        
                        characterSelect.value = selectedOption.value;
                        
                        const changeEvent = new Event('change', { bubbles: true, cancelable: true });
                        const inputEvent = new Event('input', { bubbles: true, cancelable: true });
                        
                        characterSelect.dispatchEvent(changeEvent);
                        characterSelect.dispatchEvent(inputEvent);
                        
                        window.selectedHunterForTutorial = selectedOption.text;
                    }
                }
            }, 1500);
        }
    });
    
    // Cerbere reaction selon le Hunter
    steps.push({
        id: 'cerbere_reaction',
        message: (() => {
            const hunterName = window.selectedHunterForTutorial || 'ce Hunter';
            
            // Si c'est Igrisk et qu'il a choisi Baek Yoonho
            if (IS_IGRISK && hunterName === 'Baek Yoonho') {
                return `WOUF ?! Baek Yoonho ?! Comme par hasard tu choisis le TANK ! TR√àS SUSPECT IGRIS ! ü§®`;
            }
            
            const specificReactions = {
                'Sung Jinwoo': [
                    `WOUF WOUF WOUF ! ${hunterName} ! LE MONARQUE ! MON IDOLE ! ü§©‚ú®`,
                    `*Cerb√®re devient fou* ${hunterName} ! LE PLUS FORT ! LE MEILLEUR ! üí™üî•`,
                    `OUAAAAAAF ! ${hunterName} ! Les ombres sont avec nous ! üåë‚öîÔ∏è`
                ],
                'Cha Hae-in': [
                    `WOUF WOUF ! ${hunterName} ! Elle est trop classe ! J'adore ! üíñ‚öîÔ∏è`,
                    `*queue qui remue* ${hunterName} ! La meilleure √©p√©iste ! üó°Ô∏è‚ú®`,
                    `OUAF ! ${hunterName} et ses skills de danse mortelle ! üíÉüíÄ`
                ],
                'Choi Jong-in': [
                    `Oh... ${hunterName}... *Cerb√®re fait la grimace* Le mage de feu... üòïüî•`,
                    `Mouais... ${hunterName}... C'est pas mon pr√©f√©r√© mais bon... üòí`,
                    `*soupir* ${hunterName}... J'pr√©f√®re les √©p√©istes moi ! WOUF ! üó°Ô∏è`
                ],
                'Baek Yoonho': [
                    `WOUF ! ${hunterName} ! Un autre animal ! RESPECT ! üêØü§ùüê∫`,
                    `OUAAAF ! ${hunterName} le tigre blanc ! On est cousins ! üêÖ`,
                    `*Cerb√®re approuve* ${hunterName} ! La force bestiale ! GRRR ! üí™`
                ],
                'Min Byung-gyu': [
                    `Euh... ${hunterName} ? C'est qui lui d√©j√† ? *confus* ü§î`,
                    `${hunterName}... Ah oui le healer... *b√¢ille* Ennuyeux... üò¥`,
                    `WOUF ? ${hunterName} ? Il fait quoi √† part soigner ? üè•`
                ],
                'Lim Tae-gyu': [
                    `GRRR ! ${hunterName} ! Je l'aime PAS DU TOUT ! üò§üí¢`,
                    `Beurk ! ${hunterName} ! Change vite Igris ! WOUF WOUF ! üò°`,
                    `*Cerb√®re grogne* Pas ${hunterName} ! N'importe qui mais pas lui ! üö´`
                ],
                'Woo Jinchul': [
                    `${hunterName} ! Le gars s√©rieux ! *imite une posture droite* üï¥Ô∏è`,
                    `WOUF ! ${hunterName} et ses lunettes ! Trop corporate ! üëî`,
                    `*Cerb√®re rigole* ${hunterName} ! Monsieur je-suis-s√©rieux ! üòé`
                ],
                'Go Gunhee': [
                    `*Cerb√®re s'incline* ${hunterName}... Le pr√©sident... Respect ! üé©`,
                    `WOUF ! ${hunterName} ! Le vieux sage ! J'aime bien ! üë¥‚ú®`,
                    `${hunterName}... *voix solennelle* Un grand homme ! WOUF ! üèõÔ∏è`
                ]
            };
            
            const reactions = specificReactions[hunterName] || [
                `WOUF WOUF ! ${hunterName} ! Pas mal comme choix ! üéâ`,
                `OUAAAAAAF ! ${hunterName} ! √áa peut le faire ! üê∫`,
                `*Cerb√®re analyse* ${hunterName}... Int√©ressant ! WOUF ! ü§î`
            ];
            
            return reactions[Math.floor(Math.random() * reactions.length)];
        })(),
        speaker: 'cerbere',
        duration: 3500,
        autoNext: true
    });
    
    // Tank r√©action (diff√©rente si c'est Igrisk)
    if (Math.random() < 0.3) {
        steps.push({
            id: 'tank_hunter_opinion',
            message: (() => {
                const hunterName = window.selectedHunterForTutorial || 'ce Hunter';
                
                if (IS_IGRISK) {
                    // Tank est confus s'il entend sa propre voix
                    return "Attendez... Cette voix... C'est MA voix √ßa ! QUI UTILISE MA VOIX ?! üò†";
                }
                
                const tankOpinions = {
                    'Sung Jinwoo': "√âvidemment... Tout le monde veut jouer le protagoniste... üôÑ",
                    'Cha Hae-in': "Pas mal ! Au moins elle a du style ! üíÖ‚ú®",
                    'Choi Jong-in': "Le mage de feu ? Vraiment ? Aucune d√©fense ce type ! üî•üõ°Ô∏è",
                    'Baek Yoonho': "Un vrai tank celui-l√† ! J'approuve ! üí™üõ°Ô∏è",
                    'Min Byung-gyu': "Le healer... Au moins il comprend l'importance du support ! üè•",
                    'Lim Tae-gyu': "Haha ! Excellent choix pour perdre ! üòà",
                    'Woo Jinchul': "Monsieur propre... Il doit ranger ses artifacts par ordre alphab√©tique ! üìÅ",
                    'Go Gunhee': "Respect pour les anciens ! Mais il est pas un peu lent ? üë¥"
                };
                
                return tankOpinions[hunterName] || `${hunterName} ? Mouais... J'ai vu mieux ! üòè`;
            })(),
            speaker: 'tank',
            duration: 3500,
            autoNext: true
        });
        
        if (IS_IGRISK) {
            steps.push({
                id: 'igrisk_panic',
                message: "*panique int√©rieurement* NON NON ! Tu dois te tromper ! Je suis Igris ! Regarde mon √©p√©e ! *montre un bouclier* MERDE !",
                speaker: 'igrisk',
                duration: 3500,
                autoNext: true
            });
        }
    }
    
    // Guide confirms
    steps.push({
        id: 'guide_confirms',
        message: (() => {
            const hunterName = window.selectedHunterForTutorial || 'Ce Hunter';
            
            if (IS_IGRISK) {
                return `${hunterName}... Excellent choix pour la D√âFENSE-- je veux dire, pour tout ! Continuons vite avant que-- continuons !`;
            }
            
            const igrisComments = {
                'Sung Jinwoo': `${hunterName}... Mon Seigneur original. Un choix √©vident mais excellent !`,
                'Cha Hae-in': `${hunterName} est redoutable. Ses combos sont d√©vastateurs bien ma√Ætris√©s.`,
                'Choi Jong-in': `${hunterName} n√©cessite du timing. Ses sorts de zone sont puissants.`,
                'Baek Yoonho': `${hunterName}, force brute et r√©sistance. Parfait pour les d√©butants.`,
                'Min Byung-gyu': `${hunterName}... Un choix strat√©gique. Le support est sous-estim√©.`,
                'Lim Tae-gyu': `${hunterName} ? *soupir* Si tu insistes... Montrons ce qu'on peut en faire.`,
                'Woo Jinchul': `${hunterName}, m√©thodique et efficace. Un bon choix technique.`,
                'Go Gunhee': `${hunterName}, l'exp√©rience au service de la puissance. Respectons les anciens.`
            };
            
            const defaultComments = [
                `${hunterName} est un choix int√©ressant. Voyons son potentiel !`,
                `Bon choix, Monarque. ${hunterName} a des capacit√©s uniques.`,
                `${hunterName}... Je vais te montrer comment l'optimiser !`
            ];
            
            return igrisComments[hunterName] || defaultComments[Math.floor(Math.random() * defaultComments.length)];
        })(),
        speaker: GUIDE_NAME,
        duration: 4000,
        autoNext: true
    });
    
    // ==========================================
    // üé® SECTION ARTIFACTS
    // ==========================================
    
    // Introduction artifacts
    steps.push({
        id: 'artifact_section',
        message: IS_IGRISK
            ? "Les artifacts ! L'endroit o√π la D√âFENSE brille ! Euh... je veux dire, o√π toutes les stats brillent !"
            : "Les artifacts sont le c≈ìur de la puissance ! Chaque stat compte, chaque proc peut tout changer !",
        speaker: GUIDE_NAME,
        selector: '.artifact-grid, .artifacts-container',
        highlight: true,
        duration: 5000,
        autoNext: true
    });
    
    // Focus Helmet
    steps.push({
        id: 'helmet_focus',
        message: IS_IGRISK
            ? "Le Casque ! Parfait pour mettre de la D√âFENSE-- *tousse* pour optimiser tes stats !"
            : "Commen√ßons par le Casque. Je vais te montrer chaque √©tape de l'optimisation !",
        speaker: GUIDE_NAME,
        selector: () => {
            const cards = document.querySelectorAll('.artifact-card');
            return cards[0];
        },
        highlight: true,
        duration: 4500,
        autoNext: true
    });
    
    // ==========================================
    // üìä CONFIGURATION DES STATS
    // ==========================================
    
    // MainStat (Igrisk favorise la d√©fense)
    selectedMainStat = getRandomStat('main', [], IS_IGRISK);
    steps.push({
        id: 'set_main_stat',
        message: IS_IGRISK
            ? `La stat principale sera... ${selectedMainStat} ! ${
                selectedMainStat.includes('Defense') ? "PARFAIT ! La d√©fense c'est la VIE ! üõ°Ô∏èüí™" :
                selectedMainStat.includes('Attack') ? "*d√©√ßu* De l'attaque... Bon si tu insistes... üòî" :
                "Pas mal... mais la d√©fense aurait √©t√© mieux ! üõ°Ô∏è"
            }`
            : `Je vais configurer la stat principale. ${selectedMainStat} sera parfait ! ${
                selectedMainStat.includes('Attack') ? "Maximum de d√©g√¢ts ! üí™" :
                selectedMainStat.includes('Defense') ? "Un peu de survie ne fait pas de mal... üõ°Ô∏è" :
                "√âquilibr√© et efficace ! ‚öñÔ∏è"
            }`,
        speaker: GUIDE_NAME,
        duration: 5000,
        autoNext: true,
        action: () => {
            setTimeout(() => {
                if (window.setHelmetMainStat) {
                    window.setHelmetMainStat(selectedMainStat);
                }
            }, 1500);
        }
    });
    
    // R√©actions selon la stat
    if (selectedMainStat.includes('Defense')) {
        if (IS_IGRISK) {
            steps.push({
                id: 'igrisk_loves_defense',
                message: "*essaie de cacher sa joie* Ah... Defense... C'est... c'est un choix correct. Tr√®s correct. *sourire suspect* üòä",
                speaker: 'igrisk',
                duration: 3500,
                autoNext: true
            });
        } else {
            steps.push({
                id: 'tank_loves_defense',
                message: "ENFIN ! Quelqu'un qui comprend l'importance de la d√©fense ! üõ°Ô∏èüíñ",
                speaker: 'tank',
                duration: 3500,
                autoNext: true
            });
        }
        
        steps.push({
            id: 'cerbere_disagrees',
            message: "Beurk ! Defense sur un Helmet ?! On veut du DAMAGE ! WOUF ! üò§",
            speaker: 'cerbere',
            duration: 3000,
            autoNext: true
        });
    }
    
    // SubStats (Igrisk favorise toujours la d√©fense)
    for (let i = 1; i <= 4; i++) {
        const allExclusions = [selectedMainStat, ...selectedSubstats];
        const substat = getRandomStat('sub', allExclusions, IS_IGRISK);
        selectedSubstats.push(substat);
        const statQuality = isGoodStatForCharacter(substat);
        
        steps.push({
            id: `set_substat_${i}`,
            message: IS_IGRISK
                ? `SubStat ${i}: ${substat}. ${
                    statQuality === 'defense' ? "*murmure* Oui... OUI ! Plus de d√©fense ! üõ°Ô∏è" :
                    statQuality === 'good' ? "*d√©√ßu* Bon... si tu veux du damage..." :
                    "Hmm... int√©ressant..."
                }`
                : `SubStat ${i}: ${substat}. ${
                    i === 1 ? "La premi√®re substat donne le ton !" :
                    i === 2 ? "Deuxi√®me substat, on construit le build..." :
                    i === 3 ? "Troisi√®me substat, √ßa prend forme !" :
                    "Derni√®re substat, finalisons ce chef-d'≈ìuvre !"
                }`,
            speaker: GUIDE_NAME,
            duration: 4000,
            autoNext: true,
            action: () => {
                setTimeout(() => {
                    const setFunction = window[`setSubstat${i}`];
                    if (setFunction) {
                        setFunction(substat);
                    }
                }, 1500);
            }
        });
        
        // R√©actions sp√©ciales si Igrisk et defense
        if (IS_IGRISK && statQuality === 'defense' && Math.random() < 0.5) {
            steps.push({
                id: `cerbere_suspicious_stat_${i}`,
                message: "WOUF ! Encore de la d√©fense ?! Igris tu es VRAIMENT bizarre aujourd'hui ! ü§î",
                speaker: 'cerbere',
                duration: 2500,
                autoNext: true
            });
            
            steps.push({
                id: `igrisk_excuse_${i}`,
                message: "*nerveux* C'est... c'est la m√©ta actuelle ! La d√©fense c'est... strat√©gique ! Oui voil√† !",
                speaker: 'igrisk',
                duration: 3000,
                autoNext: true
            });
        } else if (statQuality === 'good' && Math.random() < 0.7) {
            steps.push({
                id: `cerbere_happy_${i}`,
                message: `WOUF WOUF ! ${substat} ! C'est PARFAIT ! *saute partout* üéØüî•`,
                speaker: 'cerbere',
                duration: 2500,
                autoNext: true
            });
        }
    }
    
    // ==========================================
    // üé≤ PROCS
    // ==========================================
    
    steps.push({
        id: 'proc_introduction',
        message: IS_IGRISK
            ? "Les procs ! 4 chances d'avoir plus de D√âFENSE-- je veux dire, d'am√©liorer les stats ! *tousse*"
            : "Maintenant les procs ! 4 am√©liorations qui peuvent tout changer. Chaque + augmente une substat al√©atoirement !",
        speaker: GUIDE_NAME,
        duration: 5000,
        autoNext: true
    });
    
    // Procs 1-4
    for (let procNum = 1; procNum <= 4; procNum++) {
        steps.push({
            id: `proc_${procNum}`,
            message: IS_IGRISK
                ? `Proc ${procNum} ! *prie pour de la d√©fense* Allez RNG, sois gentille ! üé≤üõ°Ô∏è`
                : `${
                    procNum === 1 ? "Premier proc ! *croise les doigts* Allez, on veut du Crit Damage ! üé≤" :
                    procNum === 2 ? "Deuxi√®me am√©lioration ! La tension monte... üé∞" :
                    procNum === 3 ? "Troisi√®me proc ! On y est presque ! L'artifact prend vie ! ‚ö°" :
                    "Dernier proc ! Le moment de v√©rit√© ! Que la RNG soit avec nous ! üé≤‚ú®"
                }`,
            speaker: GUIDE_NAME,
            duration: 3500,
            autoNext: true,
            action: () => {
                setTimeout(() => {
                    if (window.doOneProc) {
                        window.doOneProc();
                    }
                }, 1500);
            }
        });
        
        if (procNum === 3) {
            steps.push({
                id: 'cerbere_excited',
                message: "WOUF WOUF WOUF ! Les stats EXPLOSENT ! C'est magnifique ! üî•üí•",
                speaker: 'cerbere',
                duration: 3000,
                autoNext: true
            });
        }
    }
    
    // R√©action finale procs
    if (IS_IGRISK) {
        steps.push({
            id: 'igrisk_procs_opinion',
            message: "Pas assez de procs d√©fense... *murmure* La RNG est cruelle avec les tanks...",
            speaker: 'igrisk',
            duration: 3500,
            autoNext: true
        });
    } else if (Math.random() < 0.4) {
        steps.push({
            id: 'tank_mocks_procs',
            message: "4 procs et pas all crit damage ? Pfff... Amateur ! üòè",
            speaker: 'tank',
            duration: 3500,
            autoNext: true
        });
        
        steps.push({
            id: 'cerbere_defends',
            message: "GRRR ! C'est la RNG Tank ! T'as juste eu de la chance toi ! WOUF ! üò§",
            speaker: 'cerbere',
            duration: 3000,
            autoNext: true
        });
    }
    
    // ==========================================
    // üé® S√âLECTION DU SET
    // ==========================================
    
    steps.push({
        id: 'open_set_menu',
        message: IS_IGRISK
            ? "Les sets ! J'esp√®re que tu vas choisir Guard ! Euh... je veux dire, choisis ce que tu veux !"
            : "Maintenant, choisissons un set ! Chaque set offre des bonus uniques. Je vais ouvrir le menu...",
        speaker: GUIDE_NAME,
        duration: 4000,
        autoNext: true,
        action: () => {
            setTimeout(() => {
                if (window.openSetMenu) {
                    window.openSetMenu();
                }
            }, 1500);
        }
    });
    
    steps.push({
        id: 'select_set',
        message: IS_IGRISK
            ? "Guard pour la d√©fense ! Guard ! GUARD ! *tousse* Pardon... Choisis ce que tu veux bien s√ªr..."
            : "Burning pour les d√©g√¢ts, Guard pour la d√©fense, Critical pour les coups critiques... Voyons voir !",
        speaker: GUIDE_NAME,
        duration: 4500,
        autoNext: true,
        action: async () => {
            await new Promise(r => setTimeout(r, 1500));
            if (window.selectRandomSet) {
                // Si Igrisk, essayer de forcer Guard !
                if (IS_IGRISK && window.selectGuardSet) {
                    await window.selectGuardSet();
                } else {
                    await window.selectRandomSet();
                }
            }
        }
    });
    
    steps.push({
        id: 'cerbere_set_reaction',
        message: IS_IGRISK
            ? "WOUF ! Si c'est Guard je sais que c'est toi TANK ! üò§"
            : "WOUF ! J'esp√®re que c'est un set offensif ! Du DAMAGE ! üí™üî•",
        speaker: 'cerbere',
        duration: 3000,
        autoNext: true
    });
    
    // ==========================================
    // üíæ SAUVEGARDE
    // ==========================================
    
    steps.push({
        id: 'click_save_button',
        message: IS_IGRISK
            ? "‚ö†Ô∏è SAUVEGARDE ! Sans √ßa, tu perds ta belle D√âFENSE-- tes stats ! Sauvegarde !"
            : "‚ö†Ô∏è TR√àS IMPORTANT ! Sauvegardons cet artifact. Sans sauvegarde, tu perds TOUT !",
        speaker: GUIDE_NAME,
        selector: () => {
            const helmetCard = document.getElementsByClassName("artifact-card")[0];
            return helmetCard?.querySelector('img[alt="Save le set"]');
        },
        highlight: true,
        duration: 4500,
        autoNext: true,
        action: () => {
            setTimeout(() => {
                if (window.clickSaveButton) {
                    window.clickSaveButton();
                }
            }, 2000);
        }
    });
    
    // Nom de l'artifact
    selectedArtifactName = IS_IGRISK 
        ? IGRISK_ARTIFACT_NAMES[Math.floor(Math.random() * IGRISK_ARTIFACT_NAMES.length)]
        : FUNNY_ARTIFACT_NAMES[Math.floor(Math.random() * FUNNY_ARTIFACT_NAMES.length)];
    
    steps.push({
        id: 'enter_artifact_name',
        message: IS_IGRISK
            ? `Le nom parfait : "${selectedArtifactName}" ! ${
                selectedArtifactName.includes('Tank') ? "*panique* NON ! Pas Tank ! Igris ! IGRIS !" :
                selectedArtifactName.includes('Defense') ? "*murmure* Parfait... üõ°Ô∏è" :
                "Un nom totalement normal, rien de suspect !"
            }`
            : `Je vais nommer cet artifact... "${selectedArtifactName}" ! ${
                selectedArtifactName.includes('Pomme') ? "*ricane* Tank va pas aimer !" :
                selectedArtifactName.includes('Tank') ? "D√©sol√© Tank, c'√©tait trop tentant..." :
                selectedArtifactName.includes('Cerb√®re') ? "En ton honneur mon ami !" :
                selectedArtifactName.includes('RNG') ? "Prions le dieu de la RNG !" :
                "Un classique du genre !"
            }`,
        speaker: GUIDE_NAME,
        duration: 5000,
        autoNext: true,
        action: async () => {
            await new Promise(r => setTimeout(r, 1500));
            if (window.enterArtifactName) {
                await window.enterArtifactName(selectedArtifactName);
            }
        }
    });
    
    // R√©action au nom si suspect
    if (IS_IGRISK && selectedArtifactName.includes('Tank')) {
        steps.push({
            id: 'cerbere_gotcha',
            message: "AH ! JE LE SAVAIS ! C'EST TANK ! TU T'ES TRAHI ! WOUF WOUF ! üéØ",
            speaker: 'cerbere',
            duration: 3500,
            autoNext: true
        });
        
        steps.push({
            id: 'igrisk_caught',
            message: "*abandonne le d√©guisement* Bon ok... C'est moi... Mais j'ai fait un bon tutoriel non ? üòÖ",
            speaker: 'igrisk',
            duration: 3500,
            autoNext: true
        });
        
        steps.push({
            id: 'real_tank_appears',
            message: "IMPOSTEUR ! Comment oses-tu te faire passer pour Igris ?! La d√©fense ne s'enseigne pas en cachette ! üò§",
            speaker: 'tank',
            duration: 4000,
            autoNext: true
        });
    }
    
    // Cancel
    steps.push({
        id: 'click_cancel',
        message: IS_IGRISK
            ? "Finalement... *panique* Le vrai Igris arrive ! Je dois partir ! √Ä toi de jouer Monarque ! *fuit*"
            : "Finalement... Non ! C'est √† TOI de cr√©er tes propres artifacts, Monarque ! Je vais annuler.",
        speaker: GUIDE_NAME,
        duration: 4500,
        autoNext: true,
        action: () => {
            setTimeout(() => {
                if (window.clickCancelButton) {
                    window.clickCancelButton();
                }
            }, 2000);
        }
    });
    
    // Conclusion
    steps.push({
        id: 'artifact_mastery',
        message: IS_IGRISK
            ? "Tu ma√Ætrises tout ! Surtout la D√âFENSE-- je veux dire, TOUTES les m√©caniques ! *dispara√Æt rapidement*"
            : "Parfait ! Tu ma√Ætrises maintenant TOUTES les m√©caniques : stats, procs, sets, sauvegarde. √Ä toi de jouer !",
        speaker: GUIDE_NAME,
        duration: 5500,
        autoNext: true
    });
    
    steps.push({
        id: 'cerbere_encouragement',
        message: IS_IGRISK
            ? "WOUF ! C'√©tait bizarre mais instructif ! M√™me si c'√©tait Tank d√©guis√© ! ü§£"
            : "WOUF WOUF ! Tu vas cr√©er des builds DE MALADE ! Go go go Monarque ! üöÄüî•",
        speaker: 'cerbere',
        duration: 3500,
        autoNext: true
    });
    
    // ==========================================
    // üéÜ EFFET DEMO ULTRA RARE (2% chance)
    // ==========================================
    
    if (Math.random() < 0.02) { 
        steps.push({
            id: 'demo_effect_warning',
            message: "*L'atmosph√®re devient soudainement lourde* Qu'est-ce que... ?! üò®",
            speaker: IS_IGRISK ? 'igrisk' : 'igris',
            duration: 3000,
            autoNext: true
        });
        
        steps.push({
            id: 'tank_demo_activation',
            message: IS_IGRISK 
                ? "QUOI ?! MOI AUSSI JE PEUX FAIRE √áA ?! MODE DEMO D√âFENSIF ! üõ°Ô∏èüíÄ"
                : "MWAHAHAHA ! VOUS PENSIEZ QUE C'√âTAIT FINI ?! ACTIVATION : MODE DEMO ! üî•üíÄ",
            speaker: IS_IGRISK ? 'igrisk' : 'tank',
            duration: 4000,
            autoNext: true
        });
        
        steps.push({
            id: 'cerbere_panic',
            message: IS_IGRISK
                ? "WOUF ?! TANK TU VAS D√âTRUIRE TON PROPRE D√âGUISEMENT ! üò±"
                : "WOUF WOUF WOUF ?! TANK ! QU'EST-CE QUE TU FAIS ?! C'EST DANGEREUX ! üò±",
            speaker: 'cerbere',
            duration: 3000,
            autoNext: true
        });
        
        steps.push({
            id: 'tank_laser_charge',
            message: "REGARDEZ LA VRAIE PUISSANCE ! LASER ORBITAL... CHARGEMENT... üéØ‚ö°",
            speaker: IS_IGRISK ? 'igrisk' : 'tank',
            duration: 3500,
            autoNext: true,
            action: () => {
                setTimeout(() => {
                    console.log('üî• DEMO EFFECT: Pr√©paration du laser orbital...');
                    document.body.style.animation = 'shake 0.5s';
                    setTimeout(() => {
                        document.body.style.animation = '';
                    }, 500);
                }, 1000);
            }
        });
        
        steps.push({
            id: 'tank_fire_laser',
            message: "FEU ! DESTRUCTION TOTALE DU DOM ! HAHAHAHA ! üí•üî•üíÄ",
            speaker: IS_IGRISK ? 'igrisk' : 'tank',
            duration: 5000,
            autoNext: true,
            action: () => {
                setTimeout(() => {
                    if (window.fireTankLaser) {
                        console.log('üöÄ DEMO EFFECT: LASER ORBITAL ACTIV√â !');
                        window.fireTankLaser();
                        
                        if (window.umami) {
                            window.umami.track('tutorial-demo-laser-fired', {
                                source: IS_IGRISK ? 'igrisk_tutorial' : 'igris_tutorial',
                                effect: 'tank_orbital_laser',
                                rarity: 'ultra_rare_2_percent',
                                guide: IS_IGRISK ? 'tank_disguised' : 'normal_igris'
                            });
                            console.log('üìä UMAMI: Laser orbital track√© !');
                        }
                    }
                    
                    document.body.style.filter = 'hue-rotate(180deg) contrast(2)';
                    setTimeout(() => {
                        document.body.style.filter = 'hue-rotate(90deg) brightness(1.5)';
                        setTimeout(() => {
                            document.body.style.filter = '';
                        }, 1000);
                    }, 500);
                }, 1500);
            }
        });
        
        steps.push({
            id: 'guide_shocked',
            message: IS_IGRISK
                ? "*r√©alise* Attendez... JE VIENS DE ME GRILLER TOUT SEUL ! üò±"
                : "TANK ! TU ES FOU ! Tu as failli d√©truire l'interface ! üò§",
            speaker: IS_IGRISK ? 'igrisk' : 'igris',
            duration: 3500,
            autoNext: true
        });
        
        steps.push({
            id: 'tank_proud',
            message: IS_IGRISK
                ? "Euh... C'√©tait... une fonctionnalit√© d'Igris ! Oui ! Igris peut faire √ßa aussi ! üòÖ"
                : "*Tank rigole* C'√©tait juste une d√©mo... Mais avoue que c'√©tait √âPIQUE ! üòà‚ú®",
            speaker: IS_IGRISK ? 'igrisk' : 'tank',
            duration: 4000,
            autoNext: true
        });
        
        steps.push({
            id: 'cerbere_amazed',
            message: "Wouf... C'√©tait... C'√âTAIT TROP COOL ! ENCORE ! ENCORE ! ü§©",
            speaker: 'cerbere',
            duration: 3000,
            autoNext: true
        });
        
        steps.push({
            id: 'guide_ends_demo',
            message: IS_IGRISK
                ? "*fuit* Bon je dois y aller ! Le vrai Igris arrive ! Bye ! üí®"
                : "*soupir* Bon... Reprenons le tutoriel S√âRIEUSEMENT maintenant...",
            speaker: IS_IGRISK ? 'igrisk' : 'igris',
            duration: 3500,
            autoNext: true
        });
    }
    
    // Continue avec le reste du tutoriel...
    // [Le reste du code reste identique, juste remplacer 'igris' par GUIDE_NAME]
    
    // Save reminder
    steps.push({
        id: 'save_reminder',
        message: IS_IGRISK
            ? "‚ö†Ô∏è Le bouton Save ! Sans lui, ta belle D√âFENSE dispara√Æt ! SAUVEGARDE TOUJOURS !"
            : "‚ö†Ô∏è N'oublie JAMAIS : Le bouton Save est TON MEILLEUR AMI ! Sans lui, tu perds tout !",
        speaker: GUIDE_NAME,
        selector: () => {
            const buttons = document.querySelectorAll('button');
            return Array.from(buttons).find(btn => {
                const text = btn.textContent?.toLowerCase() || '';
                return text === 'save' || text.includes('save') || 
                       text.includes('sauvegarder');
            });
        },
        highlight: true,
        duration: 5000,
        autoNext: true
    });
    
    steps.push({
        id: 'tank_save_advice',
        message: IS_IGRISK
            ? "Euh... Oui ! Moi aussi je sauvegarde ! Enfin, Igris sauvegarde ! Je suis Igris ! üíæ"
            : "M√™me moi je sauvegarde ! Sinon mes builds full def disparaissent ! üíæ",
        speaker: IS_IGRISK ? 'igrisk' : 'tank',
        duration: 3500,
        autoNext: true
    });
    
    // Gems, Cores, Stats sections...
    steps.push({
        id: 'gems_section',
        message: IS_IGRISK
            ? "Les Gemmes ! Blue pour l'HP, Green pour la D√âFENSE ! Les meilleures gemmes ! üíéüõ°Ô∏è"
            : "Les Gemmes offrent des bonus massifs ! Red pour l'attaque, Blue pour l'HP, Green pour la d√©fense...",
        speaker: GUIDE_NAME,
        selector: () => {
            const buttons = document.querySelectorAll('button');
            return Array.from(buttons).find(btn => {
                const text = btn.textContent.toLowerCase();
                return text.includes('gem') || text.includes('gemme');
            });
        },
        highlight: true,
        duration: 5200,
        autoNext: true
    });
    
    // Final stats
    steps.push({
        id: 'final_stats_focus',
        message: IS_IGRISK
            ? "‚ö†Ô∏è Les stats finales ! Regarde bien ta D√âFENSE ! Elle doit √™tre MAXIMALE ! üõ°Ô∏è"
            : "‚ö†Ô∏è TR√àS IMPORTANT ! Regarde ici : 'Final Stats with Artefacts'. C'est le r√©sultat FINAL de ton build !",
        speaker: GUIDE_NAME,
        selector: () => {
            const elements = document.querySelectorAll('*');
            for (const el of elements) {
                if (el.textContent === 'Final Stats with Artefacts' || 
                    el.textContent === 'Final Stats with Artifacts' ||
                    el.classList.contains('FinalStats')) {
                    return el.parentElement || el;
                }
            }
            return document.querySelector('.final-stats, .stats-display, [class*="final"]');
        },
        highlight: true,
        duration: 6000,
        autoNext: true
    });
    
    // Finale
    const finaleMessages = IS_IGRISK ? [
        "Tu es pr√™t ! Que tes builds soient D√âFENSIFS et tes boucliers SOLIDES ! üõ°Ô∏è",
        "La formation est termin√©e. N'oublie pas : la d√©fense, c'est la vie ! *fuit* üíÄ",
        "L'entra√Ænement est fini. Les vraies ombres arrivent ! *dispara√Æt* üåë"
    ] : [
        "Tu es pr√™t, Monarque ! Que tes builds soient puissants et tes procs nombreux ! ‚öîÔ∏è",
        "La formation est termin√©e. Montre au monde la puissance du Monarque des Ombres ! üíÄ",
        "L'entra√Ænement est fini. Va cr√©er des l√©gendes ! Les ombres t'accompagnent... üåë"
    ];
    
    steps.push({
        id: 'finale',
        message: finaleMessages[Math.floor(Math.random() * finaleMessages.length)],
        speaker: GUIDE_NAME,
        duration: 6000,
        autoNext: true
    });
    
    // Cerbere farewell
    steps.push({
        id: 'cerbere_farewell',
        message: IS_IGRISK
            ? "WOUF ! C'√©tait bizarre mais marrant ! Tank fait un meilleur Igris que pr√©vu ! ü§£üëã"
            : "WOUF WOUF ! *Cerb√®re te salue* √Ä bient√¥t Monarque ! Fais des builds de FOU ! üëãüî•",
        speaker: 'cerbere',
        duration: 4000,
        autoNext: true
    });
    
    // √âpilogue sp√©cial si Igrisk
    if (IS_IGRISK) {
        steps.push({
            id: 'real_igris_arrives',
            message: "*le VRAI Igris arrive* Qu'est-ce qui se passe ici ?! Tank ?! Qu'as-tu fait ?! üò†",
            speaker: 'igris',
            duration: 4000,
            autoNext: true
        });
        
        steps.push({
            id: 'igrisk_escapes',
            message: "*court √† toute vitesse* RIEN ! J'ai rien fait ! Le tutoriel est fini ! Bye ! üí®",
            speaker: 'igrisk',
            duration: 3500,
            autoNext: true
        });
        
        steps.push({
            id: 'igris_sighs',
            message: "*soupir* Toujours aussi chaotique... Au moins le Monarque a appris. M√™me si c'√©tait... diff√©rent.",
            speaker: 'igris',
            duration: 4500,
            autoNext: true
        });
    } else if (Math.random() < 0.2) {
        // √âpilogue normal
        steps.push({
            id: 'tank_epilogue',
            message: "*Tank appara√Æt* Pas mal... Mais attends de voir mes builds FULL DEF ! üòàüõ°Ô∏è",
            speaker: 'tank',
            duration: 4000,
            autoNext: true
        });
        
        steps.push({
            id: 'cerbere_final',
            message: "GRRR ! Toujours ta d√©fense Tank ! WOUF ! üò§",
            speaker: 'cerbere',
            duration: 3000,
            autoNext: true
        });
        
        steps.push({
            id: 'tank_disappears',
            message: "*ricane et dispara√Æt* La d√©fense, c'est la vie... üëª",
            speaker: 'tank',
            duration: 3500,
            autoNext: true
        });
    }
    
    return steps;
};

// Export principal
export const tutorialSteps = buildDynamicTutorialSteps();

// ==========================================
// üîß FONCTIONS WINDOW (NE PAS MODIFIER)
// ==========================================

// MainStat
window.setHelmetMainStat = function(value = 'Attack %') {
    const helmetCard = document.getElementsByClassName("artifact-card")[0];
    const mainStatDiv = helmetCard.children[1];
    const select = mainStatDiv.querySelector('select');
    
    if (select) {
        const nativeValueSetter = Object.getOwnPropertyDescriptor(window.HTMLSelectElement.prototype, 'value').set;
        nativeValueSetter.call(select, value);
        select.dispatchEvent(new Event('input', { bubbles: true }));
        select.dispatchEvent(new Event('change', { bubbles: true }));
        console.log(`‚úÖ MainStat -> ${value}`);
        return true;
    }
    return false;
};

// SubStats
window.setSubstat1 = function(value = 'Critical Hit Damage') {
    const helmetCard = document.getElementsByClassName("artifact-card")[0];
    const select = helmetCard.children[2].querySelector('select');
    
    if (select) {
        const nativeValueSetter = Object.getOwnPropertyDescriptor(window.HTMLSelectElement.prototype, 'value').set;
        nativeValueSetter.call(select, value);
        select.dispatchEvent(new Event('input', { bubbles: true }));
        select.dispatchEvent(new Event('change', { bubbles: true }));
        console.log(`‚úÖ SubStat 1 -> ${value}`);
        return true;
    }
    return false;
};

window.setSubstat2 = function(value = 'Critical Hit Rate') {
    const helmetCard = document.getElementsByClassName("artifact-card")[0];
    const select = helmetCard.children[3].querySelector('select');
    
    if (select) {
        const nativeValueSetter = Object.getOwnPropertyDescriptor(window.HTMLSelectElement.prototype, 'value').set;
        nativeValueSetter.call(select, value);
        select.dispatchEvent(new Event('input', { bubbles: true }));
        select.dispatchEvent(new Event('change', { bubbles: true }));
        console.log(`‚úÖ SubStat 2 -> ${value}`);
        return true;
    }
    return false;
};

window.setSubstat3 = function(value = 'Defense Penetration') {
    const helmetCard = document.getElementsByClassName("artifact-card")[0];
    const select = helmetCard.children[4].querySelector('select');
    
    if (select) {
        const nativeValueSetter = Object.getOwnPropertyDescriptor(window.HTMLSelectElement.prototype, 'value').set;
        nativeValueSetter.call(select, value);
        select.dispatchEvent(new Event('input', { bubbles: true }));
        select.dispatchEvent(new Event('change', { bubbles: true }));
        console.log(`‚úÖ SubStat 3 -> ${value}`);
        return true;
    }
    return false;
};

window.setSubstat4 = function(value = 'Additional Attack') {
    const helmetCard = document.getElementsByClassName("artifact-card")[0];
    const select = helmetCard.children[5].querySelector('select');
    
    if (select) {
        const nativeValueSetter = Object.getOwnPropertyDescriptor(window.HTMLSelectElement.prototype, 'value').set;
        nativeValueSetter.call(select, value);
        select.dispatchEvent(new Event('input', { bubbles: true }));
        select.dispatchEvent(new Event('change', { bubbles: true }));
        console.log(`‚úÖ SubStat 4 -> ${value}`);
        return true;
    }
    return false;
};

// Procs
window.doOneProc = function() {
    const helmetCard = document.getElementsByClassName("artifact-card")[0];
    const plusButtons = helmetCard.querySelectorAll('img[alt="Plus"]');
    const activeButtons = Array.from(plusButtons).filter(btn => 
        !btn.classList.contains('opacity-50') && 
        !btn.classList.contains('cursor-not-allowed')
    );
    
    if (activeButtons.length > 0) {
        const randomButton = activeButtons[Math.floor(Math.random() * activeButtons.length)];
        randomButton.click();
        
        const allButtons = Array.from(plusButtons);
        const clickedIndex = allButtons.indexOf(randomButton);
        const substatIndex = Math.floor(clickedIndex / 2) + 1;
        
        console.log(`‚úÖ Proc effectu√© sur SubStat ${substatIndex}`);
        return true;
    }
    
    console.log('‚ùå Aucun bouton + actif');
    return false;
};

// Set
window.openSetMenu = function() {
    const helmetCard = document.getElementsByClassName("artifact-card")[0];
    const setButton = helmetCard.querySelector('img[alt="S√©lectionner un Set"]');
    
    if (setButton) {
        console.log('‚úÖ Ouverture du menu des sets...');
        setButton.click();
        return true;
    }
    
    console.log('‚ùå Bouton Set non trouv√©');
    return false;
};

window.selectRandomSet = async function() {
    await new Promise(resolve => setTimeout(resolve, 300));
    
    const allUls = document.querySelectorAll('ul');
    let setMenu = null;
    
    for (const ul of allUls) {
        const lis = ul.querySelectorAll('li');
        if (lis.length > 0) {
            const firstLiText = lis[0].textContent;
            if (firstLiText.includes('Set') || firstLiText.includes('Burning') || firstLiText.includes('Guard')) {
                setMenu = ul;
                break;
            }
        }
    }
    
    if (!setMenu) {
        console.log('‚ùå Menu des sets non trouv√©');
        return false;
    }
    
    const setOptions = setMenu.querySelectorAll('li');
    if (setOptions.length > 0) {
        const randomIndex = Math.floor(Math.random() * setOptions.length);
        const selectedSet = setOptions[randomIndex];
        const setName = selectedSet.textContent.trim();
        
        console.log(`‚úÖ Set s√©lectionn√©: ${setName}`);
        selectedSet.click();
        return true;
    }
    
    return false;
};

// üõ°Ô∏è FONCTION SP√âCIALE POUR IGRISK - Forcer le set Guard
window.selectGuardSet = async function() {
    await new Promise(resolve => setTimeout(resolve, 300));
    
    const allUls = document.querySelectorAll('ul');
    let setMenu = null;
    
    for (const ul of allUls) {
        const lis = ul.querySelectorAll('li');
        if (lis.length > 0) {
            const firstLiText = lis[0].textContent;
            if (firstLiText.includes('Set') || firstLiText.includes('Burning') || firstLiText.includes('Guard')) {
                setMenu = ul;
                break;
            }
        }
    }
    
    if (!setMenu) {
        console.log('‚ùå Menu des sets non trouv√©');
        return false;
    }
    
    const setOptions = setMenu.querySelectorAll('li');
    
    // Chercher sp√©cifiquement le set Guard
    const guardOption = Array.from(setOptions).find(option => 
        option.textContent.toLowerCase().includes('guard')
    );
    
    if (guardOption) {
        console.log(`‚úÖ Set Guard forc√© par Igrisk ! üõ°Ô∏è`);
        guardOption.click();
        return true;
    } else {
        // Si Guard pas trouv√©, prendre au hasard
        console.log('‚ö†Ô∏è Set Guard non trouv√©, s√©lection al√©atoire');
        return window.selectRandomSet();
    }
};

// Save
window.clickSaveButton = function() {
    const helmetCard = document.getElementsByClassName("artifact-card")[0];
    const saveButton = helmetCard.querySelector('img[alt="Save le set"]');
    
    if (saveButton) {
        console.log('‚úÖ Bouton Save trouv√©, clic...');
        saveButton.click();
        return true;
    }
    
    console.log('‚ùå Bouton Save non trouv√©');
    return false;
};

window.enterArtifactName = async function(name = "GG Igris Build") {
    await new Promise(resolve => setTimeout(resolve, 300));
    
    const allInputs = document.getElementsByTagName('input');
    const artifactNameInput = allInputs[5];
    
    if (artifactNameInput) {
        console.log(`‚úÖ Input trouv√©, saisie de: "${name}"`);
        
        const nativeValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value').set;
        nativeValueSetter.call(artifactNameInput, name);
        
        artifactNameInput.dispatchEvent(new Event('input', { bubbles: true }));
        artifactNameInput.dispatchEvent(new Event('change', { bubbles: true }));
        
        console.log(`Value apr√®s update: "${artifactNameInput.value}"`);
        return true;
    }
    
    console.log('‚ùå Input non trouv√©');
    return false;
};

window.clickCancelButton = function() {
    const cancelButton = Array.from(document.querySelectorAll('button')).find(btn => 
        btn.textContent === 'Cancel' || 
        btn.textContent === 'Annuler'
    );
    
    if (cancelButton) {
        console.log('‚úÖ Bouton Cancel trouv√©, clic...');
        cancelButton.click();
        return true;
    }
    
    console.log('‚ùå Bouton Cancel non trouv√©');
    return false;
};